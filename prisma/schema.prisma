generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

generator json {
  provider = "prisma-json-types-generator"
}

model User {
  id             String          @id
  firstName      String?         @map("first_name")
  lastName       String?         @map("last_name")
  avatar         String
  email          String          @unique
  xata_id        String          @unique(map: "users__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version   Int             @default(0)
  xata_createdat DateTime        @default(now()) @db.Timestamptz(6)
  xata_updatedat DateTime        @default(now()) @db.Timestamptz(6)
  documents      Document[]
  notifications  Notifications[]

  @@map("users")
}

model Document {
  id         String           @id @default(dbgenerated("('doc_'::text || (xata_private.xid())::text)"))
  userId     String           @map("user_id")
  type       DocumentType
  status     ProcessingStatus @default(PENDING)
  archivedAt DateTime?        @map("archived_at")

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  file         File?
  vectors      Vectors[]
  webPage      WebPage?
  youtubeVideo YoutubeVideo?

  xata_id        String   @unique(map: "documents__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version   Int      @default(0)
  xata_createdat DateTime @default(now()) @db.Timestamptz(6)
  xata_updatedat DateTime @default(now()) @db.Timestamptz(6)

  @@map("documents")
}

model Vectors {
  id             String   @id @default(dbgenerated("('vec_'::text || (xata_private.xid())::text)"))
  docId          String   @map("doc_id")
  content        String
  metadata       Json
  xata_id        String   @unique(map: "vectors__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version   Int      @default(0)
  xata_createdat DateTime @default(now()) @db.Timestamptz(6)
  xata_updatedat DateTime @default(now()) @db.Timestamptz(6)
  embedding      Float[]  @db.Real
  document       Document @relation(fields: [docId], references: [id], onDelete: Cascade)

  @@map("vectors")
}

model YoutubeVideo {
  id             String      @id @default(dbgenerated("('vid_'::text || (xata_private.xid())::text)"))
  channel        String
  title          String
  description    String?
  length         Int
  views          Int?
  thumb          String
  link           String
  docId          String      @unique @map("doc_id")
  xata_id        String      @unique(map: "youtube_videos__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version   Int         @default(0)
  xata_createdat DateTime    @default(now()) @db.Timestamptz(6)
  xata_updatedat DateTime    @default(now()) @db.Timestamptz(6)
  transcript     Transcript?
  document       Document    @relation(fields: [docId], references: [id], onDelete: Cascade)

  @@map("youtube_videos")
}

model WebPage {
  id             String   @id @default(dbgenerated("('page_'::text || (xata_private.xid())::text)"))
  docId          String   @unique @map("doc_id")
  title          String
  description    String?
  favicon        String?
  banner         String?
  link           String
  text           String?
  xata_version   Int      @default(0)
  xata_createdat DateTime @default(now()) @db.Timestamptz(6)
  xata_updatedat DateTime @default(now()) @db.Timestamptz(6)
  xata_id        String   @unique(map: "web_pages__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  document       Document @relation(fields: [docId], references: [id], onDelete: Cascade)

  @@map("web_pages")
}

model Transcript {
  id      String @id
  videoId String @unique @map("video_id")

  text       String?
  summary    String?
  confidence Float?

  /// [TranscriptParagraphs]
  paragraphs Json?

  video YoutubeVideo @relation(fields: [videoId], references: [id], onDelete: Cascade)

  xata_id        String   @unique(map: "transcripts__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version   Int      @default(0)
  xata_createdat DateTime @default(now()) @db.Timestamptz(6)
  xata_updatedat DateTime @default(now()) @db.Timestamptz(6)

  @@map("transcripts")
}

model File {
  id             String   @id(map: "files_pkey") @default(dbgenerated("('file_'::text || (xata_private.xid())::text)"))
  docId          String   @unique(map: "files_doc_id_key") @map("doc_id")
  xata_updatedat DateTime @default(now()) @db.Timestamptz(6)
  xata_id        String   @unique(map: "uploaded_files__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version   Int      @default(0)
  xata_createdat DateTime @default(now()) @db.Timestamptz(6)
  /// [XataFile]
  pdf            Json
  document       Document @relation(fields: [docId], references: [id], onDelete: Cascade, map: "files_doc_id_fkey")

  @@map("uploaded_files")
}

model Notifications {
  id      String  @id @default(dbgenerated("('not_'::text || (xata_private.xid())::text)"))
  userId  String  @map("user_id")
  title   String
  message String
  goLink  String?
  isRead  Boolean @default(false) @map("is_read")

  xata_version   Int      @default(0)
  xata_createdat DateTime @default(now()) @db.Timestamptz(6)
  xata_updatedat DateTime @default(now()) @db.Timestamptz(6)
  xata_id        String   @unique(map: "notifications__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum ProcessingStatus {
  PENDING
  IN_PROGRESS
  PROCESSED
  FAILED
}

enum DocumentType {
  YoutubeVideo
  File
  WebPage
}
