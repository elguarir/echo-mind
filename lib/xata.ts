// Generated by Xata Codegen 0.29.5. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "documents",
    columns: [
      {
        name: "id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('doc_'::text || (xata_private.xid())::text)",
      },
      {
        name: "status",
        type: 'bb_dor669beud5g71j79dvj8og28g_ag8fco."ProcessingStatus"',
        notNull: true,
        unique: false,
        defaultValue:
          "'PENDING'::bb_dor669beud5g71j79dvj8og28g_ag8fco.\"ProcessingStatus\"",
      },
      {
        name: "type",
        type: 'bb_dor669beud5g71j79dvj8og28g_ag8fco."DocumentType"',
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "user_id",
        type: "link",
        link: { table: "users" },
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "xata_createdat",
        type: "timestamp(6) with time zone",
        notNull: true,
        unique: false,
        defaultValue: "CURRENT_TIMESTAMP",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
      },
      {
        name: "xata_updatedat",
        type: "timestamp(6) with time zone",
        notNull: true,
        unique: false,
        defaultValue: "CURRENT_TIMESTAMP",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
      },
    ],
  },
  {
    name: "notifications",
    columns: [
      {
        name: "goLink",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('not_'::text || (xata_private.xid())::text)",
      },
      {
        name: "is_read",
        type: "bool",
        notNull: true,
        unique: false,
        defaultValue: "false",
      },
      {
        name: "message",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "title",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "user_id",
        type: "link",
        link: { table: "users" },
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "xata_createdat",
        type: "timestamp(6) with time zone",
        notNull: true,
        unique: false,
        defaultValue: "CURRENT_TIMESTAMP",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
      },
      {
        name: "xata_updatedat",
        type: "timestamp(6) with time zone",
        notNull: true,
        unique: false,
        defaultValue: "CURRENT_TIMESTAMP",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
      },
    ],
  },
  {
    name: "transcripts",
    columns: [
      {
        name: "confidence",
        type: "float",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
      },
      {
        name: "summary",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "text",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "video_id",
        type: "link",
        link: { table: "youtube_videos" },
        notNull: true,
        unique: true,
        defaultValue: null,
      },
      {
        name: "xata_createdat",
        type: "timestamp(6) with time zone",
        notNull: true,
        unique: false,
        defaultValue: "CURRENT_TIMESTAMP",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
      },
      {
        name: "xata_updatedat",
        type: "timestamp(6) with time zone",
        notNull: true,
        unique: false,
        defaultValue: "CURRENT_TIMESTAMP",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
      },
    ],
  },
  {
    name: "uploaded_files",
    columns: [
      {
        name: "doc_id",
        type: "link",
        link: { table: "documents" },
        notNull: true,
        unique: true,
        defaultValue: null,
      },
      {
        name: "id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('file_'::text || (xata_private.xid())::text)",
      },
      {
        name: "pdf",
        type: "file",
        file: { defaultPublicAccess: false },
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "xata_createdat",
        type: "timestamp(6) with time zone",
        notNull: true,
        unique: false,
        defaultValue: "CURRENT_TIMESTAMP",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
      },
      {
        name: "xata_updatedat",
        type: "timestamp(6) with time zone",
        notNull: true,
        unique: false,
        defaultValue: "CURRENT_TIMESTAMP",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
      },
    ],
  },
  {
    name: "users",
    columns: [
      {
        name: "avatar",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "email",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
      },
      {
        name: "first_name",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
      },
      {
        name: "last_name",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "xata_createdat",
        type: "timestamp(6) with time zone",
        notNull: true,
        unique: false,
        defaultValue: "CURRENT_TIMESTAMP",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
      },
      {
        name: "xata_updatedat",
        type: "timestamp(6) with time zone",
        notNull: true,
        unique: false,
        defaultValue: "CURRENT_TIMESTAMP",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
      },
    ],
  },
  {
    name: "vectors",
    columns: [
      {
        name: "content",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "doc_id",
        type: "link",
        link: { table: "documents" },
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "embedding",
        type: "vector",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('vec_'::text || (xata_private.xid())::text)",
      },
      {
        name: "metadata",
        type: "json",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "xata_createdat",
        type: "timestamp(6) with time zone",
        notNull: true,
        unique: false,
        defaultValue: "CURRENT_TIMESTAMP",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
      },
      {
        name: "xata_updatedat",
        type: "timestamp(6) with time zone",
        notNull: true,
        unique: false,
        defaultValue: "CURRENT_TIMESTAMP",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
      },
    ],
  },
  {
    name: "web_pages",
    columns: [
      {
        name: "banner",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "description",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "doc_id",
        type: "link",
        link: { table: "documents" },
        notNull: true,
        unique: true,
        defaultValue: null,
      },
      {
        name: "favicon",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('page_'::text || (xata_private.xid())::text)",
      },
      {
        name: "link",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "text",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "title",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "xata_createdat",
        type: "timestamp(6) with time zone",
        notNull: true,
        unique: false,
        defaultValue: "CURRENT_TIMESTAMP",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
      },
      {
        name: "xata_updatedat",
        type: "timestamp(6) with time zone",
        notNull: true,
        unique: false,
        defaultValue: "CURRENT_TIMESTAMP",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
      },
    ],
  },
  {
    name: "youtube_videos",
    columns: [
      {
        name: "channel",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "description",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "doc_id",
        type: "link",
        link: { table: "documents" },
        notNull: true,
        unique: true,
        defaultValue: null,
      },
      {
        name: "id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('vid_'::text || (xata_private.xid())::text)",
      },
      {
        name: "length",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "link",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "thumb",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "title",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "views",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "xata_createdat",
        type: "timestamp(6) with time zone",
        notNull: true,
        unique: false,
        defaultValue: "CURRENT_TIMESTAMP",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
      },
      {
        name: "xata_updatedat",
        type: "timestamp(6) with time zone",
        notNull: true,
        unique: false,
        defaultValue: "CURRENT_TIMESTAMP",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
      },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Documents = InferredTypes["documents"];
export type DocumentsRecord = Documents & XataRecord;

export type Notifications = InferredTypes["notifications"];
export type NotificationsRecord = Notifications & XataRecord;

export type Transcripts = InferredTypes["transcripts"];
export type TranscriptsRecord = Transcripts & XataRecord;

export type UploadedFiles = InferredTypes["uploaded_files"];
export type UploadedFilesRecord = UploadedFiles & XataRecord;

export type Users = InferredTypes["users"];
export type UsersRecord = Users & XataRecord;

export type Vectors = InferredTypes["vectors"];
export type VectorsRecord = Vectors & XataRecord;

export type WebPages = InferredTypes["web_pages"];
export type WebPagesRecord = WebPages & XataRecord;

export type YoutubeVideos = InferredTypes["youtube_videos"];
export type YoutubeVideosRecord = YoutubeVideos & XataRecord;

export type DatabaseSchema = {
  documents: DocumentsRecord;
  notifications: NotificationsRecord;
  transcripts: TranscriptsRecord;
  uploaded_files: UploadedFilesRecord;
  users: UsersRecord;
  vectors: VectorsRecord;
  web_pages: WebPagesRecord;
  youtube_videos: YoutubeVideosRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Mohamed-Elguarir-s-workspace-ag8fco.us-east-1.xata.sh/db/quantellia",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
